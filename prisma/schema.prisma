generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model records {
  id        Int      @id @default(autoincrement())
  deviceId  String
  long      Decimal  @db.Decimal(9, 6)
  lat       Decimal  @db.Decimal(9, 6)
  speed     Int
  createdAt DateTime @default(now())
  distance  Int      @default(0)   
  
  device devices @relation(name: "DeviceRecords", fields: [deviceId], references: [imei], onDelete: Cascade)
}

model devices {
  id             Int       @id @default(autoincrement())
  imei           String    @unique
  code           String    @unique
  battery        Int
  signal         Int
  version        Int
  status         String
  name           String    @default("DeviceX")
  interval       String    @default("60")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt @default(now())

  organizationId Int?
  organization   organizations? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  records        records[] @relation(name: "DeviceRecords")
  geofence       geofences?
}

model logs {
  id        Int      @id @default(autoincrement())
  imei      String
  protocol  String
  received  String
  ack       String
  createdAt DateTime @default(now())
}

model organizations {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  email   String   @default("")
  lang    String   @default("")
  users   users[]
  devices devices[]
}

model users {
  id              Int             @id @default(autoincrement())
  name            String
  code            String          @unique
  organizationId  Int
  organization    organizations   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model geofences {
  id          Int      @id @default(autoincrement())
  deviceId    String   @unique
  coordinates Json    
  active      Boolean
  device      devices  @relation(fields: [deviceId], references: [imei], onDelete: Cascade)
}
